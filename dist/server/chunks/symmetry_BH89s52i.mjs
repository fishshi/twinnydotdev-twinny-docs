const id = "zh-cn/general/symmetry.md";
						const collection = "docs";
						const slug = "zh-cn/general/symmetry";
						const body = "\nSymmetry 是一个实验性的去中心化计算网络，允许用户共享和访问计算资源。最初与 Twinny VSCode 扩展集成，Symmetry 有潜力成为开发者、研究人员和数据科学家的强大工具。\n\n**注意**：Symmetry 仍处于 alpha 版本，可能会出现一些问题。如遇到问题，请在 [https://github.com/twinnydotdev/symmetry](https://github.com/twinnydotdev/symmetry) 上报告。\n\n![symmetry 结构图](../../../../assets/symmetry-architecture.png)\n\nSymmetry 客户端采用 MIT 许可证。\n\n[https://github.com/twinnydotdev/symmetry](https://github.com/twinnydotdev/symmetry)\n\n\n## 在 Twinny VSCode 扩展中连接 Symmetry\n\n如果网络中有可用的推理提供者，Symmetry 可以作为推理提供者与 Twinny VSCode 扩展配合使用。您可以在以下网址找到当前的提供者和可用模型：[https://twinny.dev/symmetry](https://twinny.dev/symmetry)。\n\n1. 在 Twinny 扩展的设置中，选择您想要的模型。\n2. 点击扩展中的“连接到 Symmetry”按钮。\n3. 扩展将自动使用选定的模型连接到 Symmetry 网络。模型名称可以在 Twinny 扩展的设置中进行配置，请确保与 [https://twinny.dev/symmetry](https://twinny.dev/symmetry) 中列出的可用模型匹配。未来此过程将改进，允许用户从可用模型列表中选择。\n4. 连接成功后，您将在扩展侧边栏看到绿色的“已连接”状态。\n5. 尝试通过 Twinny 扩展发送一些请求，验证其是否按预期工作。\n\n#### 未连接状态：\n![symmetry 未连接](../../../../assets/symmetry_disconnected.png)\n\n#### 已连接状态：\n![symmetry 已连接](../../../../assets/symmetry_connected.png)\n\n查看图标：\n\n![symmetry provider](../../../../assets/symmetry_provider.png)\n\n## 成为 Symmetry 提供者\n\n随着 Symmetry 的发展，用户有机会通过成为提供者为网络贡献资源。以下是您需要了解的内容：\n\n### 为什么考虑成为提供者？\n\n- 为去中心化计算网络做出贡献\n- 利用空闲计算资源\n- 未来可能有奖励机制（视网络发展而定）\n- 获取去中心化技术的经验\n- 成为机器学习研究的数据收集者\n\n### 如何成为提供者\n\n1. **安装 Symmetry**：\n\n   Unix 系统\n   ```bash\n   curl -fsSL https://www.twinny.dev/symmetry-unix.sh | sh\n   ```\n\n   Windows 系统\n   ```bash\n   iwr -useb https://www.twinny.dev/symmetry-windows.ps1 | iex\n   ```\n\n2. **配置您的节点**：\n   在 `~/.config/symmetry/` 目录中创建 `provider.yaml` 文件，配置您的提供者设置。\n\n3. **启动您的节点**：\n   ```bash\n   symmetry-cli\n   ```\n\n提供者将启动并执行一次测试调用：\n\n```\nℹ️ INFO: 🔗 Initializing client using config file: /home/twinnydotdev/.config/symmetry/provider.yaml\nℹ️ INFO: 📁 Symmetry client initialized.\nℹ️ INFO: 🔑 Discovery key: xxx\nℹ️ INFO: 🔑 Server key: 4b4a9cc325d134dee6679e9407420023531fd7e96c563f6c5d00fd5549b77435\nℹ️ INFO: 🔗 Joining server, please wait.\nℹ️ INFO: 🔗 Connected to server.\nℹ️ INFO: ✅ Verification successful.\nℹ️ INFO: 👋 Saying hello to your provider...\nℹ️ INFO: 🚀 Sending test request to http://localhost:11434/v1/chat/completions\nℹ️ INFO: 📡 Got response, checking stream...\nℹ️ INFO: ✅ Test inference call successful!\n```\n\n### 程序化实现\n\n```bash\nnpm install symmetry-core\n```\n\n```bash\nconst config = {\n  apiHostname: \"localhost\",\n  apiKey: \"\",\n  apiPath: \"/v1/chat/completions\",\n  apiPort: 11434,\n  apiProtocol: \"http\",\n  apiProvider: \"ollama\",\n  dataCollectionEnabled: false,\n  maxConnections: 10,\n  modelName: \"llama3.1:latest\",\n  name: \"twinnydotdev\",\n  path: \"/home/twinnydotdev/.config/symmetry/data\",\n  public: true,\n  serverKey: \"4b4a9cc325d134dee6679e9407420023531fd7e96c563f6c5d00fd5549b77435\",\n  systemMessage: \"I'm a system message\"\n};\n\nconst provider = new SymmetryProvider(config);\n```\n\n\n### 提供者配置\n\n`provider.yaml` 示例：\n\n```yaml\napiHostname: localhost # 推理服务器的主机地址\napiKey: # 推理服务器的 API 密钥\napiPath: /v1/chat/completions # 推理接口路径\napiPort: 11434 # 推理服务器的端口\napiProtocol: http # 推理服务器的协议\napiProvider: ollama # 推理提供者名称\ndataCollectionEnabled: true # 是否启用数据收集\nmaxConnections: 10 # 最大连接数\nmodelName: llama3:8b # 您提供的模型名称\nname: provider  # 您的提供者名称\npath: /home/richard/.config/symmetry/default # 数据存储目录\npublic: true # 是否公开访问您的提供者\nserverKey: 4b4a9cc325d134dee6679e9407420023531fd7e96c563f6c5d00fd5549b77435 # Symmetry 服务器密钥\nsystemMessage: \"I'm a system message\" # 可选的系统消息\n```\n\n根据您的设置和偏好调整这些配置。\n\n## 提供者注意事项\n\n- 确保您的节点安全且已更新\n- 注意通过您的节点传输的数据\n- 保持稳定和可靠的连接\n\n## 超越 VSCode：未来发展\n\n虽然目前专注于 Twinny 扩展，但 Symmetry 的潜力不仅限于此：\n\n- **独立使用**：计划开发一个 Node.js 包，使开发者可以在任何 Node.js 应用中利用 Symmetry 网络。\n- **API 访问**：未来版本可能包括直接的 API 访问，支持与广泛应用和服务的集成。\n\n## 常见问题 (FAQ)\n\n1. **Q: Symmetry 仅限于 VSCode 用户吗？**  \n   A: 目前与 Twinny VSCode 扩展集成，但未来计划通过 Node.js 包和直接 API 访问拓展 Symmetry 的可访问性。\n\n2. **Q: 我可以用 Symmetry 做聊天和自动补全吗？**  \n   目前，Symmetry 设计用于聊天，但未来可能会用于其他用途（例如自动补全）。\n\n3. **Q: Symmetry 如何确保数据隐私？**  \n   A: Symmetry 使用加密连接进行所有通信。在初始匹配后，客户端与提供者之间直接通信，绕过中央服务器。然而，提供者可以访问解密后的数据进行处理，因此在使用网络时请考虑数据的敏感性。\n\n4. **Q: 我可以在自己的项目中使用 Symmetry 吗？**  \n   目前，Symmetry 主要用于 Twinny VSCode 扩展，但计划推出 Node.js 包，使其可以在各种项目中广泛集成。\n\n5. **Q: 成为提供者会有奖励吗？**  \n   目前没有正式的奖励系统，但随着网络的发展，可能会引入奖励机制。目前作为提供者贡献网络，是一个支持去中心化技术并获得经验的机会。\n\n6. **Q: 如何获取 Symmetry 开发的最新动态？**  \n   A: 请关注 Symmetry 官方 GitHub 仓库和文档，获取最新更新和公告。\n\n通过探索 Symmetry，无论是作为用户通过 Twinny 扩展，还是作为提供者，您都在参与去中心化计算技术的发展。随着 Symmetry 的演进，它旨在为开发者和研究人员提供更灵活、强大的选择。";
						const data = {title:"Symmetry - 推理网络",description:"探索 Symmetry，一个与 Twinny VSCode 扩展集成的去中心化计算网络及其扩展功能。",editUrl:true,head:[],template:"doc",sidebar:{hidden:false,attrs:{}},pagefind:true};
						const _internal = {
							type: 'content',
							filePath: "/home/richard/Desktop/twinny/twinny-docs/src/content/docs/zh-cn/general/symmetry.md",
							rawData: undefined,
						};

export { _internal, body, collection, data, id, slug };
