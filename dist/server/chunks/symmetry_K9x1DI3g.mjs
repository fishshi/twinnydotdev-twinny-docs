import { e as createComponent, r as renderTemplate, m as maybeRenderHead, u as unescapeHTML, s as spreadAttributes } from './astro_D8JpLML5.mjs';
import { g as getImage } from './pages/node_CFP0O91b.mjs';
import { A as Astro__YOlm2, a as Astro__H17VV, b as Astro__25XiUt, c as Astro__ZSJGiy } from './symmetry_provider_D-fYI_dr.mjs';
import 'clsx';

const images = async function(html) {
					const imageSources = {};
					{
											const regex = new RegExp('__ASTRO_IMAGE_="([^"]*' + "\\.\\./\\.\\./\\.\\./assets/symmetry-architecture\\.png" + '[^"]*)"', 'g');
											let match;
											let occurrenceCounter = 0;
											while ((match = regex.exec(html)) !== null) {
													const matchKey = "../../../assets/symmetry-architecture.png" + '_' + occurrenceCounter;
													const imageProps = JSON.parse(match[1].replace(/&#x22;/g, '"'));
													const { src, ...props } = imageProps;
													
													imageSources[matchKey] = await getImage({src: Astro__YOlm2, ...props});
													occurrenceCounter++;
											}
									}
{
											const regex = new RegExp('__ASTRO_IMAGE_="([^"]*' + "\\.\\./\\.\\./\\.\\./assets/symmetry_disconnected\\.png" + '[^"]*)"', 'g');
											let match;
											let occurrenceCounter = 0;
											while ((match = regex.exec(html)) !== null) {
													const matchKey = "../../../assets/symmetry_disconnected.png" + '_' + occurrenceCounter;
													const imageProps = JSON.parse(match[1].replace(/&#x22;/g, '"'));
													const { src, ...props } = imageProps;
													
													imageSources[matchKey] = await getImage({src: Astro__H17VV, ...props});
													occurrenceCounter++;
											}
									}
{
											const regex = new RegExp('__ASTRO_IMAGE_="([^"]*' + "\\.\\./\\.\\./\\.\\./assets/symmetry_connected\\.png" + '[^"]*)"', 'g');
											let match;
											let occurrenceCounter = 0;
											while ((match = regex.exec(html)) !== null) {
													const matchKey = "../../../assets/symmetry_connected.png" + '_' + occurrenceCounter;
													const imageProps = JSON.parse(match[1].replace(/&#x22;/g, '"'));
													const { src, ...props } = imageProps;
													
													imageSources[matchKey] = await getImage({src: Astro__25XiUt, ...props});
													occurrenceCounter++;
											}
									}
{
											const regex = new RegExp('__ASTRO_IMAGE_="([^"]*' + "\\.\\./\\.\\./\\.\\./assets/symmetry_provider\\.png" + '[^"]*)"', 'g');
											let match;
											let occurrenceCounter = 0;
											while ((match = regex.exec(html)) !== null) {
													const matchKey = "../../../assets/symmetry_provider.png" + '_' + occurrenceCounter;
													const imageProps = JSON.parse(match[1].replace(/&#x22;/g, '"'));
													const { src, ...props } = imageProps;
													
													imageSources[matchKey] = await getImage({src: Astro__ZSJGiy, ...props});
													occurrenceCounter++;
											}
									}
					return imageSources;
			};

			async function updateImageReferences(html) {
				return images(html).then((imageSources) => {
						return html.replaceAll(/__ASTRO_IMAGE_="([^"]+)"/gm, (full, imagePath) => {
								const decodedImagePath = JSON.parse(imagePath.replace(/&#x22;/g, '"'));
		
								// Use the 'index' property for each image occurrence
								const srcKey = decodedImagePath.src + '_' + decodedImagePath.index;
		
								if (imageSources[srcKey].srcSet && imageSources[srcKey].srcSet.values.length > 0) {
										imageSources[srcKey].attributes.srcset = imageSources[srcKey].srcSet.attribute;
								}
		
								const { index, ...attributesWithoutIndex } = imageSources[srcKey].attributes;
		
								return spreadAttributes({
										src: imageSources[srcKey].src,
										...attributesWithoutIndex,
								});
						});
				});
		}
		

		// NOTE: This causes a top-level await to appear in the user's code, which can break very easily due to a Rollup
	  // bug and certain adapters not supporting it correctly. See: https://github.com/rollup/rollup/issues/4708
	  // Tread carefully!
			const html = await updateImageReferences("<p>Symmetry is a distributed network that allows users to share and access computational resources. Initially integrated with the twinny VSCode extension, Symmetry has potential to become a powerful tool for developers, researchers, and data scientists.</p>\n<p>Note: Symmetry is still in alpha and there may be some issues. Please report any issues you find at <a href=\"https://github.com/twinnydotdev/symmetry\">https://github.com/twinnydotdev/symmetry</a>.</p>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../../assets/symmetry-architecture.png&#x22;,&#x22;alt&#x22;:&#x22;symmetry architecture diagram&#x22;,&#x22;index&#x22;:0}\"></p>\n<p>The symmetry client is licensed under the Apache 2.0 license.</p>\n<p><a href=\"https://github.com/twinnydotdev/symmetry\">https://github.com/twinnydotdev/symmetry</a></p>\n<h2 id=\"connecting-to-symmetry-in-twinny-vscode-extension\">Connecting to Symmetry in twinny VSCode Extension</h2>\n<p>Symmetry can be used as an inference provider within the twinny VSCode extension if there are active providers available in the network for the specific model.  You can find the current providers and the available models at: <a href=\"https://twinny.dev/symmetry\">https://twinny.dev/symmetry</a>.</p>\n<ol>\n<li>In the twinny extension settings, select your desired model.</li>\n<li>Click the “Connect to Symmetry” button in the extension.</li>\n<li>The extension will automatically connect to the Symmetry network using the selected model. The model name can be configured inside the twinny extension settings, please try to match this with one of the available models found at <a href=\"https://twinny.dev/symmetry\">https://twinny.dev/symmetry</a>. This process will be improved in the future to allow users to select from a list of available models.</li>\n<li>When you’re connected you should see the green “Connected” status in the extension sidebar.</li>\n<li>Try sending some requests to the model using the twinny extension it should work as expected.</li>\n</ol>\n<h4 id=\"disconnected\">Disconnected:</h4>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../../assets/symmetry_disconnected.png&#x22;,&#x22;alt&#x22;:&#x22;symmetry connected&#x22;,&#x22;index&#x22;:0}\"></p>\n<h4 id=\"connected\">Connected:</h4>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../../assets/symmetry_connected.png&#x22;,&#x22;alt&#x22;:&#x22;symmetry connected&#x22;,&#x22;index&#x22;:0}\"></p>\n<p>Look for the icon:</p>\n<p><img __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;../../../assets/symmetry_provider.png&#x22;,&#x22;alt&#x22;:&#x22;symmetry provider&#x22;,&#x22;index&#x22;:0}\"></p>\n<h2 id=\"becoming-a-symmetry-provider\">Becoming a Symmetry Provider</h2>\n<p>As Symmetry grows, there’s an opportunity for users to contribute by becoming providers. Here’s what you need to know:</p>\n<h3 id=\"why-consider-becoming-a-provider\">Why Consider Becoming a Provider?</h3>\n<ul>\n<li>Contribute to a distributed computing network</li>\n<li>Utilize idle computational resources</li>\n<li>Potential for future incentive systems (subject to network development)</li>\n<li>Gain experience with peer to peer technologies</li>\n<li>Become the collector of data for machine learning research</li>\n</ul>\n<h3 id=\"how-to-become-a-provider\">How to Become a Provider</h3>\n<ol>\n<li>\n<p><strong>Install Symmetry</strong>:</p>\n<p>Unix</p>\n<div class=\"expressive-code\"><link rel=\"stylesheet\" href=\"/_astro/ec.d6kn2.css\"><script type=\"module\" src=\"/_astro/ec.dy9ns.js\"></script><figure class=\"frame is-terminal not-content\"><figcaption class=\"header\"><span class=\"title\"></span><span class=\"sr-only\">Terminal window</span></figcaption><pre tabindex=\"0\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#82AAFF;--1:#3C63B3\">curl</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">-fsSL</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#ECC48D;--1:#3C63B3\">https://www.twinny.dev/symmetry-unix.sh</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#7FDBCA;--1:#097174\">|</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">sh</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"curl -fsSL https://www.twinny.dev/symmetry-unix.sh | sh\"><div></div></button></div></figure></div>\n<p>Windows</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre tabindex=\"0\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">iwr -useb https://www.twinny.dev/symmetry-windows.ps1 | iex</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"iwr -useb https://www.twinny.dev/symmetry-windows.ps1 | iex\"><div></div></button></div></figure></div>\n</li>\n<li>\n<p><strong>Configure Your Node</strong>:\nCreate a <code dir=\"auto\">provider.yaml</code> file in <code dir=\"auto\">~/.config/symmetry/</code> with your provider settings.</p>\n</li>\n<li>\n<p><strong>Start Your Node</strong>:</p>\n<div class=\"expressive-code\"><figure class=\"frame is-terminal not-content\"><figcaption class=\"header\"><span class=\"title\"></span><span class=\"sr-only\">Terminal window</span></figcaption><pre tabindex=\"0\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#82AAFF;--1:#3C63B3\">symmetry-cli</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"symmetry-cli\"><div></div></button></div></figure></div>\n</li>\n</ol>\n<p>The provider will start and make a test call to your provider.</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre tabindex=\"0\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">ℹ️ INFO: 🔗 Initializing client using config file: /home/twinnydotdev/.config/symmetry/provider.yaml</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">ℹ️ INFO: 📁 Symmetry client initialized.</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">ℹ️ INFO: 🔑 Discovery key: xxx</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">ℹ️ INFO: 🔑 Server key: 4b4a9cc325d134dee6679e9407420023531fd7e96c563f6c5d00fd5549b77435</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">ℹ️ INFO: 🔗 Joining server, please wait.</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">ℹ️ INFO: 🔗 Connected to server.</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">ℹ️ INFO: ✅ Verification successful.</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">ℹ️ INFO: 👋 Saying hello to your provider...</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">ℹ️ INFO: 🚀 Sending test request to http://localhost:11434/v1/chat/completions</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">ℹ️ INFO: 📡 Got response, checking stream...</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#d6deeb;--1:#403f53\">ℹ️ INFO: ✅ Test inference call successful!</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"ℹ️ INFO: 🔗 Initializing client using config file: /home/twinnydotdev/.config/symmetry/provider.yamlℹ️ INFO: 📁 Symmetry client initialized.ℹ️ INFO: 🔑 Discovery key: xxxℹ️ INFO: 🔑 Server key: 4b4a9cc325d134dee6679e9407420023531fd7e96c563f6c5d00fd5549b77435ℹ️ INFO: 🔗 Joining server, please wait.ℹ️ INFO: 🔗 Connected to server.ℹ️ INFO: ✅ Verification successful.ℹ️ INFO: 👋 Saying hello to your provider...ℹ️ INFO: 🚀 Sending test request to http://localhost:11434/v1/chat/completionsℹ️ INFO: 📡 Got response, checking stream...ℹ️ INFO: ✅ Test inference call successful!\"><div></div></button></div></figure></div>\n<h3 id=\"programatically\">Programatically</h3>\n<div class=\"expressive-code\"><figure class=\"frame is-terminal not-content\"><figcaption class=\"header\"><span class=\"title\"></span><span class=\"sr-only\">Terminal window</span></figcaption><pre tabindex=\"0\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#82AAFF;--1:#3C63B3\">npm</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#ECC48D;--1:#3C63B3\">install</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#ECC48D;--1:#3C63B3\">symmetry-core</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"npm install symmetry-core\"><div></div></button></div></figure></div>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre tabindex=\"0\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">const </span><span style=\"--0:#82AAFF;--1:#3C63B3\">config</span><span style=\"--0:#C792EA;--1:#8D46B4\"> = {</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#C792EA;--1:#8D46B4\">  </span></span><span style=\"--0:#C792EA;--1:#8D46B4\">apiHostname: </span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">localhost</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#C792EA;--1:#8D46B4\">,</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#C792EA;--1:#8D46B4\">  </span></span><span style=\"--0:#C792EA;--1:#8D46B4\">apiKey: </span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">apikeyforprovider</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#C792EA;--1:#8D46B4\">, </span><span style=\"--0:#809191;--1:#5E6578\">// not publically available or transported to server</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#C792EA;--1:#8D46B4\">  </span></span><span style=\"--0:#C792EA;--1:#8D46B4\">apiChatPath: </span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">/v1/chat/completions</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#C792EA;--1:#8D46B4\">,</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#C792EA;--1:#8D46B4\">  </span></span><span style=\"--0:#C792EA;--1:#8D46B4\">apiPort: </span><span style=\"--0:#F78C6C;--1:#AA0982\">11434</span><span style=\"--0:#C792EA;--1:#8D46B4\">,</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#C792EA;--1:#8D46B4\">  </span></span><span style=\"--0:#C792EA;--1:#8D46B4\">apiProtocol: </span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">http</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#C792EA;--1:#8D46B4\">,</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#C792EA;--1:#8D46B4\">  </span></span><span style=\"--0:#C792EA;--1:#8D46B4\">apiProvider: </span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">ollama</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#C792EA;--1:#8D46B4\">,</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#C792EA;--1:#8D46B4\">  </span></span><span style=\"--0:#C792EA;--1:#8D46B4\">dataCollectionEnabled: </span><span style=\"--0:#FF5874;--1:#A54A4A\">false</span><span style=\"--0:#C792EA;--1:#8D46B4\">,</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#C792EA;--1:#8D46B4\">  </span></span><span style=\"--0:#C792EA;--1:#8D46B4\">maxConnections: </span><span style=\"--0:#F78C6C;--1:#AA0982\">10</span><span style=\"--0:#C792EA;--1:#8D46B4\">,</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#C792EA;--1:#8D46B4\">  </span></span><span style=\"--0:#C792EA;--1:#8D46B4\">modelName: </span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">llama3.1:latest</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#C792EA;--1:#8D46B4\">,</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#C792EA;--1:#8D46B4\">  </span></span><span style=\"--0:#C792EA;--1:#8D46B4\">name: </span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">twinnydotdev</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#C792EA;--1:#8D46B4\">,</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#C792EA;--1:#8D46B4\">  </span></span><span style=\"--0:#C792EA;--1:#8D46B4\">dataPath: </span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">/home/twinnydotdev/.config/symmetry/data</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#C792EA;--1:#8D46B4\">,</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#C792EA;--1:#8D46B4\">  </span></span><span style=\"--0:#C792EA;--1:#8D46B4\">public: </span><span style=\"--0:#FF5874;--1:#A54A4A\">true</span><span style=\"--0:#C792EA;--1:#8D46B4\">,</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#C792EA;--1:#8D46B4\">  </span></span><span style=\"--0:#C792EA;--1:#8D46B4\">serverKey: </span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">4b4a9cc325d134dee6679e9407420023531fd7e96c563f6c5d00fd5549b77435</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#C792EA;--1:#8D46B4\">,</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#C792EA;--1:#8D46B4\">  </span></span><span style=\"--0:#C792EA;--1:#8D46B4\">systemMessage: </span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">I'm a system message</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#C792EA;--1:#8D46B4\">,</span></div></div><div class=\"ec-line\"><div class=\"code\"><span class=\"indent\"><span style=\"--0:#C792EA;--1:#8D46B4\">  </span></span><span style=\"--0:#C792EA;--1:#8D46B4\">userSecret: </span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">supersecretpasswordforuptimetracking</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">}</span><span style=\"--0:#D6DEEB;--1:#403F53\">;</span></div></div><div class=\"ec-line\"><div class=\"code\">\n</div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#C792EA;--1:#8D46B4\">const </span><span style=\"--0:#82AAFF;--1:#3C63B3\">provider</span><span style=\"--0:#C792EA;--1:#8D46B4\"> = </span><span style=\"--0:#7FDBCA;--1:#097174\">new</span><span style=\"--0:#C792EA;--1:#8D46B4\"> </span><span style=\"--0:#82AAFF;--1:#3C63B3\">SymmetryProvider</span><span style=\"--1:#403F53\"><span style=\"--0:#D6DEEB\">(</span><span style=\"--0:#D7DBE0\">config</span><span style=\"--0:#D6DEEB\">);</span></span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"const config = {  apiHostname: &#x22;localhost&#x22;,  apiKey: &#x22;apikeyforprovider&#x22;, // not publically available or transported to server  apiChatPath: &#x22;/v1/chat/completions&#x22;,  apiPort: 11434,  apiProtocol: &#x22;http&#x22;,  apiProvider: &#x22;ollama&#x22;,  dataCollectionEnabled: false,  maxConnections: 10,  modelName: &#x22;llama3.1:latest&#x22;,  name: &#x22;twinnydotdev&#x22;,  dataPath: &#x22;/home/twinnydotdev/.config/symmetry/data&#x22;,  public: true,  serverKey: &#x22;4b4a9cc325d134dee6679e9407420023531fd7e96c563f6c5d00fd5549b77435&#x22;,  systemMessage: &#x22;I&#x27;m a system message&#x22;,  userSecret: &#x22;supersecretpasswordforuptimetracking&#x22;};const provider = new SymmetryProvider(config);\"><div></div></button></div></figure></div>\n<h3 id=\"provider-configuration\">Provider Configuration</h3>\n<p>Example <code dir=\"auto\">provider.yaml</code>:</p>\n<div class=\"expressive-code\"><figure class=\"frame not-content\"><figcaption class=\"header\"></figcaption><pre tabindex=\"0\"><code><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#7FDBCA;--1:#111111\">apiHostname</span><span style=\"--0:#D6DEEB;--1:#403F53\">: </span><span style=\"--0:#ECC48D;--1:#3C63B3\">localhost</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#809191;--1:#616671\"># The host of your inference server</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#7FDBCA;--1:#111111\">apiKey</span><span style=\"--0:#D6DEEB;--1:#403F53\">: </span><span style=\"--0:#809191;--1:#616671\"># The API key for your inference server</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#7FDBCA;--1:#111111\">apiChatPath</span><span style=\"--0:#D6DEEB;--1:#403F53\">: </span><span style=\"--0:#ECC48D;--1:#3C63B3\">/v1/chat/completions</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#809191;--1:#616671\"># The path to the inference endpoint</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#7FDBCA;--1:#111111\">apiPort</span><span style=\"--0:#D6DEEB;--1:#403F53\">: </span><span style=\"--0:#F78C6C;--1:#AA0982\">11434</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#809191;--1:#616671\"># The port of your inference server</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#7FDBCA;--1:#111111\">apiProtocol</span><span style=\"--0:#D6DEEB;--1:#403F53\">: </span><span style=\"--0:#ECC48D;--1:#3C63B3\">http</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#809191;--1:#616671\"># The protocol of your inference server</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#7FDBCA;--1:#111111\">apiProvider</span><span style=\"--0:#D6DEEB;--1:#403F53\">: </span><span style=\"--0:#ECC48D;--1:#3C63B3\">ollama</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#809191;--1:#616671\"># The name of the inference provider</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#7FDBCA;--1:#111111\">dataCollectionEnabled</span><span style=\"--0:#D6DEEB;--1:#403F53\">: </span><span style=\"--0:#FF5874;--1:#A54A4A\">true</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#809191;--1:#616671\"># Whether to advertise that data collection is enabled</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#7FDBCA;--1:#111111\">maxConnections</span><span style=\"--0:#D6DEEB;--1:#403F53\">: </span><span style=\"--0:#F78C6C;--1:#AA0982\">10</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#809191;--1:#616671\"># The maximum number of connections to allow</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#7FDBCA;--1:#111111\">modelName</span><span style=\"--0:#D6DEEB;--1:#403F53\">: </span><span style=\"--0:#ECC48D;--1:#3C63B3\">llama3:8b</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#809191;--1:#616671\"># The name of the model you are serving</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#7FDBCA;--1:#111111\">name</span><span style=\"--0:#D6DEEB;--1:#403F53\">: </span><span style=\"--0:#ECC48D;--1:#3C63B3\">provider</span><span style=\"--0:#D6DEEB;--1:#403F53\">  </span><span style=\"--0:#809191;--1:#616671\"># The name of your provider</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#7FDBCA;--1:#111111\">dataPath</span><span style=\"--0:#D6DEEB;--1:#403F53\">: </span><span style=\"--0:#ECC48D;--1:#3C63B3\">/home/richard/.config/symmetry/default</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#809191;--1:#616671\"># The data directory</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#7FDBCA;--1:#111111\">public</span><span style=\"--0:#D6DEEB;--1:#403F53\">: </span><span style=\"--0:#FF5874;--1:#A54A4A\">true</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#809191;--1:#616671\"># Whether your provider is publicly accessible</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#7FDBCA;--1:#111111\">serverKey</span><span style=\"--0:#D6DEEB;--1:#403F53\">: </span><span style=\"--0:#ECC48D;--1:#3C63B3\">4b4a9cc325d134dee6679e9407420023531fd7e96c563f6c5d00fd5549b77435</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#809191;--1:#616671\"># The symmetry server key which handles provider messages</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#7FDBCA;--1:#111111\">systemMessage</span><span style=\"--0:#D6DEEB;--1:#403F53\">: </span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">Im a system message</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#809191;--1:#616671\"># Optional system message for all chats</span></div></div><div class=\"ec-line\"><div class=\"code\"><span style=\"--0:#7FDBCA;--1:#111111\">userSecret</span><span style=\"--0:#D6DEEB;--1:#403F53\">: </span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#ECC48D;--1:#9B504E\">supersecretpasswordforuptimetracking</span><span style=\"--0:#D9F5DD;--1:#111111\">\"</span><span style=\"--0:#D6DEEB;--1:#403F53\"> </span><span style=\"--0:#809191;--1:#616671\"># A secret for uniquely identify peers on the network</span></div></div></code></pre><div class=\"copy\"><button title=\"Copy to clipboard\" data-copied=\"Copied!\" data-code=\"apiHostname: localhost # The host of your inference serverapiKey: # The API key for your inference serverapiChatPath: /v1/chat/completions # The path to the inference endpointapiPort: 11434 # The port of your inference serverapiProtocol: http # The protocol of your inference serverapiProvider: ollama # The name of the inference providerdataCollectionEnabled: true # Whether to advertise that data collection is enabledmaxConnections: 10 # The maximum number of connections to allowmodelName: llama3:8b # The name of the model you are servingname: provider  # The name of your providerdataPath: /home/richard/.config/symmetry/default # The data directorypublic: true # Whether your provider is publicly accessibleserverKey: 4b4a9cc325d134dee6679e9407420023531fd7e96c563f6c5d00fd5549b77435 # The symmetry server key which handles provider messagessystemMessage: &#x22;Im a system message&#x22; # Optional system message for all chatsuserSecret: &#x22;supersecretpasswordforuptimetracking&#x22; # A secret for uniquely identify peers on the network\"><div></div></button></div></figure></div>\n<p>Adjust these settings based on your setup and preferences.</p>\n<h2 id=\"considerations-for-providers\">Considerations for Providers</h2>\n<ul>\n<li>Ensure your node is secure and up-to-date</li>\n<li>Be aware of the data passing through your node</li>\n<li>Maintain a stable and reliable connection</li>\n</ul>\n<h2 id=\"beyond-vscode-future-developments\">Beyond VSCode: Future Developments</h2>\n<p>While currently focused on the twinny extension, Symmetry’s potential extends further:</p>\n<ul>\n<li><strong>Standalone Usage</strong>: Plans are in place to develop a Node.js package that will allow developers to tap into the Symmetry network from any Node.js application.</li>\n<li><strong>API Access</strong>: Future versions may include direct API access, enabling integration with a wide range of applications and services.</li>\n</ul>\n<h2 id=\"frequently-asked-questions-faqs\">Frequently Asked Questions (FAQs)</h2>\n<ol>\n<li>\n<p><strong>Q: Is Symmetry only for VSCode users?</strong>\nA: While currently integrated with the twinny VSCode extension, there are plans to expand Symmetry’s accessibility through a Node.js package and potentially direct API access in the future.</p>\n</li>\n<li>\n<p><strong>Q: Can I use Symmetry for chat and autocomplete?</strong>\nCurrently, Symmetry is designed for chat, but it could be used for other purposes in the future (e.g., autocomplete).</p>\n</li>\n<li>\n<p><strong>Q: How does Symmetry ensure data privacy?</strong>\nA: Symmetry uses encrypted connections for all communications. After initial matchmaking, clients and providers communicate directly, bypassing the central server. However, providers do have access to decrypted data for processing, so consider data sensitivity when using the network.</p>\n</li>\n<li>\n<p><strong>Q: Can I use Symmetry in my own projects?</strong>\nA: Currently, Symmetry is primarily used within the twinny VSCode extension. However, plans for a Node.js package are in development, which will allow broader integration in various projects.</p>\n</li>\n<li>\n<p><strong>Q: Are there rewards for being a provider?</strong></p>\n<p>A: Yes, providers can earn points through a gamification system:</p>\n</li>\n</ol>\n<ul>\n<li>1 base point for every hour they stay online</li>\n<li>Progressive bonus points each consecutive hour (2, 3, 4, etc.) up to a maximum of 6 bonus points</li>\n<li>Points currently serve as a fun way to track participation and engagement</li>\n<li>While there may be potential for future utility token integration with the Twinny VSCode extension and Symmetry network, this is not guaranteed and there are no concrete plans at this time.</li>\n</ul>\n<ol start=\"6\">\n<li><strong>Q: How can I stay updated on Symmetry’s development?</strong>\nA: Keep an eye on the official Symmetry GitHub repository and documentation for the latest updates and announcements.</li>\n</ol>\n<p>By exploring Symmetry, whether as a user through the twinny extension or as a provider, you’re participating in the development of distributed computing technologies. As Symmetry evolves, it aims to offer more flexible and powerful options for developers and researchers alike.</p>\n<p>Please refer to the <a href=\"https://www.twinny.dev/privacy\">privacy policy</a> for information regarding usage of the network.</p>");
	

				const frontmatter = {"title":"Symmetry - Inference Network","description":"Explore Symmetry, a distributed computing network integrated with twinny VSCode extension and beyond."};
				const file = "/home/richard/Desktop/twinny/twinny-docs/src/content/docs/general/symmetry.md";
				const url = undefined;
				function rawContent() {
					return "\nSymmetry is a distributed network that allows users to share and access computational resources. Initially integrated with the twinny VSCode extension, Symmetry has potential to become a powerful tool for developers, researchers, and data scientists.\n\nNote: Symmetry is still in alpha and there may be some issues. Please report any issues you find at [https://github.com/twinnydotdev/symmetry](https://github.com/twinnydotdev/symmetry).\n\n![symmetry architecture diagram](../../../assets/symmetry-architecture.png)\n\nThe symmetry client is licensed under the Apache 2.0 license.\n\n[https://github.com/twinnydotdev/symmetry](https://github.com/twinnydotdev/symmetry)\n\n\n## Connecting to Symmetry in twinny VSCode Extension\n\nSymmetry can be used as an inference provider within the twinny VSCode extension if there are active providers available in the network for the specific model.  You can find the current providers and the available models at: [https://twinny.dev/symmetry](https://twinny.dev/symmetry).\n\n1. In the twinny extension settings, select your desired model.\n2. Click the \"Connect to Symmetry\" button in the extension.\n3. The extension will automatically connect to the Symmetry network using the selected model. The model name can be configured inside the twinny extension settings, please try to match this with one of the available models found at [https://twinny.dev/symmetry](https://twinny.dev/symmetry). This process will be improved in the future to allow users to select from a list of available models.\n4. When you're connected you should see the green \"Connected\" status in the extension sidebar.\n5. Try sending some requests to the model using the twinny extension it should work as expected.\n\n#### Disconnected:\n![symmetry connected](../../../assets/symmetry_disconnected.png)\n\n#### Connected:\n![symmetry connected](../../../assets/symmetry_connected.png)\n\nLook for the icon:\n\n![symmetry provider](../../../assets/symmetry_provider.png)\n\n## Becoming a Symmetry Provider\n\nAs Symmetry grows, there's an opportunity for users to contribute by becoming providers. Here's what you need to know:\n\n### Why Consider Becoming a Provider?\n\n- Contribute to a distributed computing network\n- Utilize idle computational resources\n- Potential for future incentive systems (subject to network development)\n- Gain experience with peer to peer technologies\n- Become the collector of data for machine learning research \n\n### How to Become a Provider\n\n1. **Install Symmetry**:\n\n   Unix\n   ```bash\n   curl -fsSL https://www.twinny.dev/symmetry-unix.sh | sh\n   ```\n\n   Windows\n   ```\n   iwr -useb https://www.twinny.dev/symmetry-windows.ps1 | iex\n   ```\n\n2. **Configure Your Node**:\n   Create a `provider.yaml` file in `~/.config/symmetry/` with your provider settings.\n\n3. **Start Your Node**:\n   ```bash\n   symmetry-cli\n   ```\n\nThe provider will start and make a test call to your provider.\n\n```\nℹ️ INFO: 🔗 Initializing client using config file: /home/twinnydotdev/.config/symmetry/provider.yaml\nℹ️ INFO: 📁 Symmetry client initialized.\nℹ️ INFO: 🔑 Discovery key: xxx\nℹ️ INFO: 🔑 Server key: 4b4a9cc325d134dee6679e9407420023531fd7e96c563f6c5d00fd5549b77435\nℹ️ INFO: 🔗 Joining server, please wait.\nℹ️ INFO: 🔗 Connected to server.\nℹ️ INFO: ✅ Verification successful.\nℹ️ INFO: 👋 Saying hello to your provider...\nℹ️ INFO: 🚀 Sending test request to http://localhost:11434/v1/chat/completions\nℹ️ INFO: 📡 Got response, checking stream...\nℹ️ INFO: ✅ Test inference call successful!\n```\n\n### Programatically\n\n```bash\nnpm install symmetry-core\n```\n\n```javascript\nconst config = {\n  apiHostname: \"localhost\",\n  apiKey: \"apikeyforprovider\", // not publically available or transported to server\n  apiChatPath: \"/v1/chat/completions\",\n  apiPort: 11434,\n  apiProtocol: \"http\",\n  apiProvider: \"ollama\",\n  dataCollectionEnabled: false,\n  maxConnections: 10,\n  modelName: \"llama3.1:latest\",\n  name: \"twinnydotdev\",\n  dataPath: \"/home/twinnydotdev/.config/symmetry/data\",\n  public: true,\n  serverKey: \"4b4a9cc325d134dee6679e9407420023531fd7e96c563f6c5d00fd5549b77435\",\n  systemMessage: \"I'm a system message\",\n  userSecret: \"supersecretpasswordforuptimetracking\"\n};\n\nconst provider = new SymmetryProvider(config);\n```\n\n\n### Provider Configuration\n\nExample `provider.yaml`:\n\n```yaml\napiHostname: localhost # The host of your inference server\napiKey: # The API key for your inference server\napiChatPath: /v1/chat/completions # The path to the inference endpoint\napiPort: 11434 # The port of your inference server\napiProtocol: http # The protocol of your inference server\napiProvider: ollama # The name of the inference provider\ndataCollectionEnabled: true # Whether to advertise that data collection is enabled\nmaxConnections: 10 # The maximum number of connections to allow\nmodelName: llama3:8b # The name of the model you are serving\nname: provider  # The name of your provider\ndataPath: /home/richard/.config/symmetry/default # The data directory\npublic: true # Whether your provider is publicly accessible\nserverKey: 4b4a9cc325d134dee6679e9407420023531fd7e96c563f6c5d00fd5549b77435 # The symmetry server key which handles provider messages\nsystemMessage: \"Im a system message\" # Optional system message for all chats\nuserSecret: \"supersecretpasswordforuptimetracking\" # A secret for uniquely identify peers on the network\n```\n\nAdjust these settings based on your setup and preferences.\n\n## Considerations for Providers\n\n- Ensure your node is secure and up-to-date\n- Be aware of the data passing through your node\n- Maintain a stable and reliable connection\n\n## Beyond VSCode: Future Developments\n\nWhile currently focused on the twinny extension, Symmetry's potential extends further:\n\n- **Standalone Usage**: Plans are in place to develop a Node.js package that will allow developers to tap into the Symmetry network from any Node.js application.\n- **API Access**: Future versions may include direct API access, enabling integration with a wide range of applications and services.\n\n## Frequently Asked Questions (FAQs)\n\n1. **Q: Is Symmetry only for VSCode users?**\n   A: While currently integrated with the twinny VSCode extension, there are plans to expand Symmetry's accessibility through a Node.js package and potentially direct API access in the future.\n\n2. **Q: Can I use Symmetry for chat and autocomplete?**\n   Currently, Symmetry is designed for chat, but it could be used for other purposes in the future (e.g., autocomplete).\n\n3. **Q: How does Symmetry ensure data privacy?**\n   A: Symmetry uses encrypted connections for all communications. After initial matchmaking, clients and providers communicate directly, bypassing the central server. However, providers do have access to decrypted data for processing, so consider data sensitivity when using the network.\n\n4. **Q: Can I use Symmetry in my own projects?**\n   A: Currently, Symmetry is primarily used within the twinny VSCode extension. However, plans for a Node.js package are in development, which will allow broader integration in various projects.\n\n5. **Q: Are there rewards for being a provider?**\n\n    A: Yes, providers can earn points through a gamification system:\n- 1 base point for every hour they stay online\n- Progressive bonus points each consecutive hour (2, 3, 4, etc.) up to a maximum of 6 bonus points\n- Points currently serve as a fun way to track participation and engagement\n- While there may be potential for future utility token integration with the Twinny VSCode extension and Symmetry network, this is not guaranteed and there are no concrete plans at this time.\n\n6. **Q: How can I stay updated on Symmetry's development?**\n   A: Keep an eye on the official Symmetry GitHub repository and documentation for the latest updates and announcements.\n\nBy exploring Symmetry, whether as a user through the twinny extension or as a provider, you're participating in the development of distributed computing technologies. As Symmetry evolves, it aims to offer more flexible and powerful options for developers and researchers alike.\n\nPlease refer to the [privacy policy](https://www.twinny.dev/privacy) for information regarding usage of the network.\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"connecting-to-symmetry-in-twinny-vscode-extension","text":"Connecting to Symmetry in twinny VSCode Extension"},{"depth":4,"slug":"disconnected","text":"Disconnected:"},{"depth":4,"slug":"connected","text":"Connected:"},{"depth":2,"slug":"becoming-a-symmetry-provider","text":"Becoming a Symmetry Provider"},{"depth":3,"slug":"why-consider-becoming-a-provider","text":"Why Consider Becoming a Provider?"},{"depth":3,"slug":"how-to-become-a-provider","text":"How to Become a Provider"},{"depth":3,"slug":"programatically","text":"Programatically"},{"depth":3,"slug":"provider-configuration","text":"Provider Configuration"},{"depth":2,"slug":"considerations-for-providers","text":"Considerations for Providers"},{"depth":2,"slug":"beyond-vscode-future-developments","text":"Beyond VSCode: Future Developments"},{"depth":2,"slug":"frequently-asked-questions-faqs","text":"Frequently Asked Questions (FAQs)"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
